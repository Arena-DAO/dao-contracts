/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { CurveType, Uint128, HatcherAllowlistConfigType, Uint64, Decimal, InstantiateMsg, HatcherAllowlistEntryMsg, HatcherAllowlistConfigMsg, MinMax, CommonsPhaseConfig, ClosedConfig, HatchConfig, OpenConfig, ReserveToken, SupplyToken, NewDenomMetadata, DenomUnit, ExecuteMsg, UpdatePhaseConfigMsg, Action, Expiration, Timestamp, QueryMsg, QuoteResponse, CurveInfoResponse, DenomResponse, Addr, DonationsResponse, CommonsPhase, DumpStateResponse, CommonsPhaseConfigResponse, NullableAddr, HatcherAllowlistResponse, HatcherAllowlistEntry, HatcherAllowlistConfig, HatchersResponse, Boolean, NullableUint128, OwnershipForString, String } from "./CwAbc.types";
import { CwAbcQueryClient, CwAbcClient } from "./CwAbc.client";
export const cwAbcQueryKeys = {
  contract: ([{
    contract: "cwAbc"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...cwAbcQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  curveInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "curve_info",
    args
  }] as const),
  curveType: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "curve_type",
    args
  }] as const),
  denom: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "denom",
    args
  }] as const),
  donations: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "donations",
    args
  }] as const),
  isPaused: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "is_paused",
    args
  }] as const),
  fundingPoolForwarding: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "funding_pool_forwarding",
    args
  }] as const),
  hatchers: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "hatchers",
    args
  }] as const),
  hatcher: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "hatcher",
    args
  }] as const),
  hatcherAllowlist: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "hatcher_allowlist",
    args
  }] as const),
  maxSupply: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "max_supply",
    args
  }] as const),
  buyQuote: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "buy_quote",
    args
  }] as const),
  sellQuote: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "sell_quote",
    args
  }] as const),
  phase: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "phase",
    args
  }] as const),
  phaseConfig: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "phase_config",
    args
  }] as const),
  tokenContract: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "token_contract",
    args
  }] as const),
  supplyDenom: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "supply_denom",
    args
  }] as const),
  dumpState: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "dump_state",
    args
  }] as const),
  ownership: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...cwAbcQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const)
};
export interface CwAbcReactQuery<TResponse, TData = TResponse> {
  client: CwAbcQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CwAbcOwnershipQuery<TData> extends CwAbcReactQuery<OwnershipForString, TData> {}
export function useCwAbcOwnershipQuery<TData = OwnershipForString>({
  client,
  options
}: CwAbcOwnershipQuery<TData>) {
  return useQuery<OwnershipForString, Error, TData>(cwAbcQueryKeys.ownership(client?.contractAddress), () => client ? client.ownership() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcDumpStateQuery<TData> extends CwAbcReactQuery<DumpStateResponse, TData> {}
export function useCwAbcDumpStateQuery<TData = DumpStateResponse>({
  client,
  options
}: CwAbcDumpStateQuery<TData>) {
  return useQuery<DumpStateResponse, Error, TData>(cwAbcQueryKeys.dumpState(client?.contractAddress), () => client ? client.dumpState() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcSupplyDenomQuery<TData> extends CwAbcReactQuery<String, TData> {}
export function useCwAbcSupplyDenomQuery<TData = String>({
  client,
  options
}: CwAbcSupplyDenomQuery<TData>) {
  return useQuery<String, Error, TData>(cwAbcQueryKeys.supplyDenom(client?.contractAddress), () => client ? client.supplyDenom() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcTokenContractQuery<TData> extends CwAbcReactQuery<Addr, TData> {}
export function useCwAbcTokenContractQuery<TData = Addr>({
  client,
  options
}: CwAbcTokenContractQuery<TData>) {
  return useQuery<Addr, Error, TData>(cwAbcQueryKeys.tokenContract(client?.contractAddress), () => client ? client.tokenContract() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcPhaseConfigQuery<TData> extends CwAbcReactQuery<CommonsPhaseConfigResponse, TData> {}
export function useCwAbcPhaseConfigQuery<TData = CommonsPhaseConfigResponse>({
  client,
  options
}: CwAbcPhaseConfigQuery<TData>) {
  return useQuery<CommonsPhaseConfigResponse, Error, TData>(cwAbcQueryKeys.phaseConfig(client?.contractAddress), () => client ? client.phaseConfig() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcPhaseQuery<TData> extends CwAbcReactQuery<CommonsPhase, TData> {}
export function useCwAbcPhaseQuery<TData = CommonsPhase>({
  client,
  options
}: CwAbcPhaseQuery<TData>) {
  return useQuery<CommonsPhase, Error, TData>(cwAbcQueryKeys.phase(client?.contractAddress), () => client ? client.phase() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcSellQuoteQuery<TData> extends CwAbcReactQuery<QuoteResponse, TData> {
  args: {
    payment: Uint128;
  };
}
export function useCwAbcSellQuoteQuery<TData = QuoteResponse>({
  client,
  args,
  options
}: CwAbcSellQuoteQuery<TData>) {
  return useQuery<QuoteResponse, Error, TData>(cwAbcQueryKeys.sellQuote(client?.contractAddress, args), () => client ? client.sellQuote({
    payment: args.payment
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcBuyQuoteQuery<TData> extends CwAbcReactQuery<QuoteResponse, TData> {
  args: {
    payment: Uint128;
  };
}
export function useCwAbcBuyQuoteQuery<TData = QuoteResponse>({
  client,
  args,
  options
}: CwAbcBuyQuoteQuery<TData>) {
  return useQuery<QuoteResponse, Error, TData>(cwAbcQueryKeys.buyQuote(client?.contractAddress, args), () => client ? client.buyQuote({
    payment: args.payment
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcMaxSupplyQuery<TData> extends CwAbcReactQuery<NullableUint128, TData> {}
export function useCwAbcMaxSupplyQuery<TData = NullableUint128>({
  client,
  options
}: CwAbcMaxSupplyQuery<TData>) {
  return useQuery<NullableUint128, Error, TData>(cwAbcQueryKeys.maxSupply(client?.contractAddress), () => client ? client.maxSupply() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcHatcherAllowlistQuery<TData> extends CwAbcReactQuery<HatcherAllowlistResponse, TData> {
  args: {
    configType?: HatcherAllowlistConfigType;
    limit?: number;
    startAfter?: string;
  };
}
export function useCwAbcHatcherAllowlistQuery<TData = HatcherAllowlistResponse>({
  client,
  args,
  options
}: CwAbcHatcherAllowlistQuery<TData>) {
  return useQuery<HatcherAllowlistResponse, Error, TData>(cwAbcQueryKeys.hatcherAllowlist(client?.contractAddress, args), () => client ? client.hatcherAllowlist({
    configType: args.configType,
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcHatcherQuery<TData> extends CwAbcReactQuery<Uint128, TData> {
  args: {
    addr: string;
  };
}
export function useCwAbcHatcherQuery<TData = Uint128>({
  client,
  args,
  options
}: CwAbcHatcherQuery<TData>) {
  return useQuery<Uint128, Error, TData>(cwAbcQueryKeys.hatcher(client?.contractAddress, args), () => client ? client.hatcher({
    addr: args.addr
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcHatchersQuery<TData> extends CwAbcReactQuery<HatchersResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCwAbcHatchersQuery<TData = HatchersResponse>({
  client,
  args,
  options
}: CwAbcHatchersQuery<TData>) {
  return useQuery<HatchersResponse, Error, TData>(cwAbcQueryKeys.hatchers(client?.contractAddress, args), () => client ? client.hatchers({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcFundingPoolForwardingQuery<TData> extends CwAbcReactQuery<NullableAddr, TData> {}
export function useCwAbcFundingPoolForwardingQuery<TData = NullableAddr>({
  client,
  options
}: CwAbcFundingPoolForwardingQuery<TData>) {
  return useQuery<NullableAddr, Error, TData>(cwAbcQueryKeys.fundingPoolForwarding(client?.contractAddress), () => client ? client.fundingPoolForwarding() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcIsPausedQuery<TData> extends CwAbcReactQuery<Boolean, TData> {}
export function useCwAbcIsPausedQuery<TData = Boolean>({
  client,
  options
}: CwAbcIsPausedQuery<TData>) {
  return useQuery<Boolean, Error, TData>(cwAbcQueryKeys.isPaused(client?.contractAddress), () => client ? client.isPaused() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcDonationsQuery<TData> extends CwAbcReactQuery<DonationsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCwAbcDonationsQuery<TData = DonationsResponse>({
  client,
  args,
  options
}: CwAbcDonationsQuery<TData>) {
  return useQuery<DonationsResponse, Error, TData>(cwAbcQueryKeys.donations(client?.contractAddress, args), () => client ? client.donations({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcDenomQuery<TData> extends CwAbcReactQuery<DenomResponse, TData> {}
export function useCwAbcDenomQuery<TData = DenomResponse>({
  client,
  options
}: CwAbcDenomQuery<TData>) {
  return useQuery<DenomResponse, Error, TData>(cwAbcQueryKeys.denom(client?.contractAddress), () => client ? client.denom() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcCurveTypeQuery<TData> extends CwAbcReactQuery<CurveType, TData> {}
export function useCwAbcCurveTypeQuery<TData = CurveType>({
  client,
  options
}: CwAbcCurveTypeQuery<TData>) {
  return useQuery<CurveType, Error, TData>(cwAbcQueryKeys.curveType(client?.contractAddress), () => client ? client.curveType() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcCurveInfoQuery<TData> extends CwAbcReactQuery<CurveInfoResponse, TData> {}
export function useCwAbcCurveInfoQuery<TData = CurveInfoResponse>({
  client,
  options
}: CwAbcCurveInfoQuery<TData>) {
  return useQuery<CurveInfoResponse, Error, TData>(cwAbcQueryKeys.curveInfo(client?.contractAddress), () => client ? client.curveInfo() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwAbcUpdateOwnershipMutation {
  client: CwAbcClient;
  msg: Action;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAbcUpdateOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAbcUpdateOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAbcUpdateOwnershipMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwnership(msg, fee, memo, funds), options);
}
export interface CwAbcCloseMutation {
  client: CwAbcClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAbcCloseMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAbcCloseMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAbcCloseMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.close(fee, memo, funds), options);
}
export interface CwAbcUpdatePhaseConfigMutation {
  client: CwAbcClient;
  msg: UpdatePhaseConfigMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAbcUpdatePhaseConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAbcUpdatePhaseConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAbcUpdatePhaseConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updatePhaseConfig(msg, fee, memo, funds), options);
}
export interface CwAbcUpdateFundingPoolForwardingMutation {
  client: CwAbcClient;
  msg: {
    address?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAbcUpdateFundingPoolForwardingMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAbcUpdateFundingPoolForwardingMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAbcUpdateFundingPoolForwardingMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateFundingPoolForwarding(msg, fee, memo, funds), options);
}
export interface CwAbcTogglePauseMutation {
  client: CwAbcClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAbcTogglePauseMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAbcTogglePauseMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAbcTogglePauseMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.togglePause(fee, memo, funds), options);
}
export interface CwAbcUpdateHatchAllowlistMutation {
  client: CwAbcClient;
  msg: {
    toAdd: HatcherAllowlistEntryMsg[];
    toRemove: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAbcUpdateHatchAllowlistMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAbcUpdateHatchAllowlistMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAbcUpdateHatchAllowlistMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateHatchAllowlist(msg, fee, memo, funds), options);
}
export interface CwAbcUpdateCurveMutation {
  client: CwAbcClient;
  msg: {
    curveType: CurveType;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAbcUpdateCurveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAbcUpdateCurveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAbcUpdateCurveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateCurve(msg, fee, memo, funds), options);
}
export interface CwAbcUpdateMaxSupplyMutation {
  client: CwAbcClient;
  msg: {
    maxSupply?: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAbcUpdateMaxSupplyMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAbcUpdateMaxSupplyMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAbcUpdateMaxSupplyMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateMaxSupply(msg, fee, memo, funds), options);
}
export interface CwAbcWithdrawMutation {
  client: CwAbcClient;
  msg: {
    amount?: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAbcWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAbcWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAbcWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}
export interface CwAbcDonateMutation {
  client: CwAbcClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAbcDonateMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAbcDonateMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAbcDonateMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.donate(fee, memo, funds), options);
}
export interface CwAbcSellMutation {
  client: CwAbcClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAbcSellMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAbcSellMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAbcSellMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.sell(fee, memo, funds), options);
}
export interface CwAbcBuyMutation {
  client: CwAbcClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAbcBuyMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAbcBuyMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAbcBuyMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.buy(fee, memo, funds), options);
}