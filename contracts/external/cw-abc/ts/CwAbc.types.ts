/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type CurveType = {
  constant: {
    scale: number;
    value: Uint128;
  };
} | {
  linear: {
    scale: number;
    slope: Uint128;
  };
} | {
  square_root: {
    scale: number;
    slope: Uint128;
  };
};
export type Uint128 = string;
export type HatcherAllowlistConfigType = {
  d_a_o: {
    priority?: Uint64 | null;
  };
} | {
  address: {};
};
export type Uint64 = string;
export type Decimal = string;
export interface InstantiateMsg {
  curve_type: CurveType;
  funding_pool_forwarding?: string | null;
  hatcher_allowlist?: HatcherAllowlistEntryMsg[] | null;
  phase_config: CommonsPhaseConfig;
  reserve: ReserveToken;
  supply: SupplyToken;
  token_issuer_code_id: number;
}
export interface HatcherAllowlistEntryMsg {
  addr: string;
  config: HatcherAllowlistConfigMsg;
}
export interface HatcherAllowlistConfigMsg {
  config_type: HatcherAllowlistConfigType;
  contribution_limits_override?: MinMax | null;
}
export interface MinMax {
  max: Uint128;
  min: Uint128;
}
export interface CommonsPhaseConfig {
  closed: ClosedConfig;
  hatch: HatchConfig;
  open: OpenConfig;
}
export interface ClosedConfig {}
export interface HatchConfig {
  contribution_limits: MinMax;
  entry_fee: Decimal;
  initial_raise: MinMax;
}
export interface OpenConfig {
  entry_fee: Decimal;
  exit_fee: Decimal;
}
export interface ReserveToken {
  decimals: number;
  denom: string;
}
export interface SupplyToken {
  decimals: number;
  max_supply?: Uint128 | null;
  metadata?: NewDenomMetadata | null;
  subdenom: string;
}
export interface NewDenomMetadata {
  additional_denom_units?: DenomUnit[] | null;
  description: string;
  display: string;
  name: string;
  symbol: string;
}
export interface DenomUnit {
  aliases: string[];
  denom: string;
  exponent: number;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  buy: {};
} | {
  sell: {};
} | {
  donate: {};
} | {
  withdraw: {
    amount?: Uint128 | null;
  };
} | {
  update_max_supply: {
    max_supply?: Uint128 | null;
  };
} | {
  update_curve: {
    curve_type: CurveType;
  };
} | {
  update_hatch_allowlist: {
    to_add: HatcherAllowlistEntryMsg[];
    to_remove: string[];
  };
} | {
  toggle_pause: {};
} | {
  update_funding_pool_forwarding: {
    address?: string | null;
  };
} | {
  update_phase_config: UpdatePhaseConfigMsg;
} | {
  close: {};
} | {
  update_ownership: Action;
};
export type UpdatePhaseConfigMsg = {
  hatch: {
    contribution_limits?: MinMax | null;
    entry_fee?: Decimal | null;
    initial_raise?: MinMax | null;
  };
} | {
  open: {
    entry_fee?: Decimal | null;
    exit_fee?: Decimal | null;
  };
} | {
  closed: {};
};
export type Action = {
  transfer_ownership: {
    expiry?: Expiration | null;
    new_owner: string;
  };
} | "accept_ownership" | "renounce_ownership";
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export type Timestamp = Uint64;
export type QueryMsg = {
  curve_info: {};
} | {
  curve_type: {};
} | {
  denom: {};
} | {
  donations: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  is_paused: {};
} | {
  funding_pool_forwarding: {};
} | {
  hatchers: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  hatcher: {
    addr: string;
  };
} | {
  hatcher_allowlist: {
    config_type?: HatcherAllowlistConfigType | null;
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  max_supply: {};
} | {
  buy_quote: {
    payment: Uint128;
  };
} | {
  sell_quote: {
    payment: Uint128;
  };
} | {
  phase: {};
} | {
  phase_config: {};
} | {
  token_contract: {};
} | {
  supply_denom: {};
} | {
  dump_state: {};
} | {
  ownership: {};
};
export interface QuoteResponse {
  amount: Uint128;
  funded: Uint128;
  new_reserve: Uint128;
  new_supply: Uint128;
}
export interface CurveInfoResponse {
  funding: Uint128;
  reserve: Uint128;
  reserve_denom: string;
  spot_price: Decimal;
  supply: Uint128;
}
export interface DenomResponse {
  denom: string;
}
export type Addr = string;
export interface DonationsResponse {
  donations: [Addr, Uint128][];
}
export type CommonsPhase = "hatch" | "open" | "closed";
export interface DumpStateResponse {
  curve_info: CurveInfoResponse;
  curve_type: CurveType;
  is_paused: boolean;
  max_supply?: Uint128 | null;
  phase: CommonsPhase;
  phase_config: CommonsPhaseConfigResponse;
  supply_denom: string;
}
export interface CommonsPhaseConfigResponse {
  phase: CommonsPhase;
  phase_config: CommonsPhaseConfig;
}
export type NullableAddr = Addr | null;
export interface HatcherAllowlistResponse {
  allowlist?: HatcherAllowlistEntry[] | null;
}
export interface HatcherAllowlistEntry {
  addr: Addr;
  config: HatcherAllowlistConfig;
}
export interface HatcherAllowlistConfig {
  config_height: number;
  config_type: HatcherAllowlistConfigType;
  contribution_limits_override?: MinMax | null;
}
export interface HatchersResponse {
  hatchers: [Addr, Uint128][];
}
export type Boolean = boolean;
export type NullableUint128 = Uint128 | null;
export interface OwnershipForString {
  owner?: string | null;
  pending_expiry?: Expiration | null;
  pending_owner?: string | null;
}
export type String = string;