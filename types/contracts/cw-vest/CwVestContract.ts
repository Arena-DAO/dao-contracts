/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.5.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export type Uint128 = string;
export type Addr = string;
export type PaymentState = "Paused" | "Active" | "Claimed";
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {
    [k: string]: unknown;
  };
};
export type Timestamp = Uint64;
export type Uint64 = string;
export interface CheckedPayment {
  amount: Uint128;
  denom?: string | null;
  recipient: Addr;
  state: PaymentState;
  token_address?: Addr | null;
  vesting_time: Expiration;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  claim: {
    [k: string]: unknown;
  };
} | {
  schedule_payments: {
    [k: string]: unknown;
  };
} | {
  pause_payments: {
    recipient: string;
    [k: string]: unknown;
  };
} | {
  resume_payments: {
    recipient: string;
    [k: string]: unknown;
  };
};
export interface GetPaymentsResponse {
  payments: CheckedPayment[];
  [k: string]: unknown;
}
export interface InstantiateMsg {
  admin_address: string;
  payments: Payment[];
  [k: string]: unknown;
}
export interface Payment {
  amount: Uint128;
  denom?: string | null;
  num_payments: Uint128;
  recipient: string;
  token_address?: Addr | null;
  vesting_time: Expiration;
  [k: string]: unknown;
}
export type QueryMsg = {
  get_payments: {
    [k: string]: unknown;
  };
};
export interface CwVestReadOnlyInterface {
  contractAddress: string;
  getPayments: () => Promise<GetPaymentsResponse>;
}
export class CwVestQueryClient implements CwVestReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getPayments = this.getPayments.bind(this);
  }

  getPayments = async (): Promise<GetPaymentsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_payments: {}
    });
  };
}
export interface CwVestInterface extends CwVestReadOnlyInterface {
  contractAddress: string;
  sender: string;
  claim: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  schedulePayments: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  pausePayments: ({
    recipient
  }: {
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  resumePayments: ({
    recipient
  }: {
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export class CwVestClient extends CwVestQueryClient implements CwVestInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.claim = this.claim.bind(this);
    this.schedulePayments = this.schedulePayments.bind(this);
    this.pausePayments = this.pausePayments.bind(this);
    this.resumePayments = this.resumePayments.bind(this);
  }

  claim = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {}
    }, fee, memo, funds);
  };
  schedulePayments = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      schedule_payments: {}
    }, fee, memo, funds);
  };
  pausePayments = async ({
    recipient
  }: {
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pause_payments: {
        recipient
      }
    }, fee, memo, funds);
  };
  resumePayments = async ({
    recipient
  }: {
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      resume_payments: {
        recipient
      }
    }, fee, memo, funds);
  };
}